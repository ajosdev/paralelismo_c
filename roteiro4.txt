1.Como ficou o tempo de execução da versão paralelizada com reduction em relação à versão anterior (sequencial)? Use seu código para imprimir o speedup alcançado.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <omp.h>

#define sequencial_time 0.765860120000070

int ehPrimo(long num) {
   long divisor;

   if( num <= 1 )
    return 0;
   else
    if(num > 3){
      if(num % 2 == 0)
        return 0;
      long max_divisor = sqrt(num);
      for(divisor = 3; divisor <= max_divisor; divisor += 2)
	    if (num % divisor == 0)
	       return 0;
    }
   return 1;
}

int main() {
  long LIMITE_MAX = 2000000;
  long contaPrimo;
  long soma;
  int n;
double start = omp_get_wtime();
double end = 0;

  if (LIMITE_MAX <= 1)
    soma = 0;
  else {
    soma = 1;
#pragma omp parallel for private (contaPrimo) reduction(+:soma)
    for (n = 3; n < LIMITE_MAX; n += 2){
      contaPrimo = ehPrimo(n);
      soma = soma + contaPrimo;
    }
  }
end = omp_get_wtime()-start;
printf("time: %.15lf \n", end);
printf("speedup: %.15lf \n", sequencial_time/end);
  printf("Número total de primos: %ld\n", soma);

  return 0;
}

2.Como ficou o tempo de execução da versão paralelizada com a seção crítica em relação ao que usou a redução (reduction)? Rode pelo menos 10 vezes e compare o tempo médio (computado e impresso em seu código, como na tarefa do cálculo de Pi).

	Secao critica	Reducao
1	2,66E-01	2,68E-01
2	2,72E-01	2,68E-01
3	2,67E-01	2,67E-01
4	2,68E-01	2,67E-01
5	2,67E-01	2,67E-01
6	2,72E-01	2,67E-01
7	2,68E-01	2,66E-01
8	2,68E-01	2,66E-01
9	2,70E-01	2,65E-01
10	2,70E-01	2,78E-01
		
Media:	2,68E-01	2,67E-01

3.Explique porque o tempo com a seção crítica ficou “bom” (“comparável” ao tempo com a redução). Pense na carga de trabalho que cada thread recebe ao serem divididas as iterações do loop paralelizado.

O tempo necessário para calcular a grande carga de trabalho do calculo de primos foi dividida de acordo com o número de Threads do processador pois a carga de trabalho foi bem dividida entre eles.

4.Em relação ao balanceamento de carga, compare os tempos de execução usando a redução (sem seção crítica) e cada uma das três políticas (static, dynamic e guided, estas duas últimas com chunk size igual a 100). Use LIMITE_MAX igual a 2 milhões e 4 milhões. Novamente, rode pelo menos 10 vezes com cada parâmetro e reporte algo parecido com:



